/*jsl:import DashcodePart.js*/

/**   
 *  @declare DC.SplitLayout
 *  @extends DC.DashcodePart
 *  
 */
 
/* 
 This file was generated by Dashcode and is covered by the 
 license.txt included in the project.  You may edit this file, 
 however it is recommended to first turn off the Dashcode 
 code generator otherwise the changes will be lost.
 */

// Note: Properties and methods beginning with underbar ("_") are considered private and subject to change in future Dashcode releases.

DC.SplitLayout = Class.create(DC.DashcodePart, {    

    exposedBindings: ["splitterPosition"],

    partSetup: function(spec) {
        var element = this.viewElement();
        
        // read values from the spec
        var isVertical = spec.isVertical || false;
        this._splitterPosition = spec.splitterPosition || 0;
        this._view1Flexible = spec.flexibleViewIndex != 1;
        this._initialContainerSize = spec.initialSize || 0;
        this._initialSplitterSize = spec.initialSplitterSize || 0;
        this._inDesign = window.dashcode && window.dashcode.inDesign;

        // find the subviews and splitter and create events div
        this._view1 = null;
        this._view2 = null;
        this._splitter = null;
        var kids = element.children;
        for (var i=0; i<kids.length; i++) {
            if (!this._view1) {
                this._view1 = kids[i];
            } else if (!this._splitter) {
                this._splitter = kids[i];
            } else {
                this._view2 = kids[i];
                break;
            }
        }
        this._splitterEventsElement = document.createElement("div");
        if (!this._inDesign) {
            element.appendChild(this._splitterEventsElement);
        }

        if (!this._view1 || !this._view2 || !this._splitter) {
            console.log("Error: Could not find internal views.");
            return;
        }
        
        // set built-in style that won't change
        this._view1.style.position = "absolute";
        this._view2.style.position = "absolute";
        this._splitter.style.position = "absolute";
        this._splitterEventsElement.style.position = "absolute";

        this._view1.style.left = "0px";
        this._view1.style.top = "0px";
        this._view2.style.bottom = "0px";
        this._view2.style.right = "0px";

        this._view1.style.width = "auto";
        this._view1.style.height = "auto";
        this._view2.style.width = "auto";
        this._view2.style.height = "auto";

        // initial layout depending on orientation
        this.setIsVertical(isVertical);

        // event handlers
        var _self = this;
        this._splitterMouseDownHandler = function(event) {_self._splitterMouseDown(event);};
        this._splitterMouseMoveHandler = function(event) {_self._splitterMouseMove(event);};
        this._splitterMouseUpHandler = function(event) {_self._splitterMouseUp(event);};
        Event.observe(this._splitterEventsElement, 'mousedown', this._splitterMouseDownHandler);        
    },
    
    layoutViews: function() {
        // calculate sizes and positions
        var containerSize = this._getContainerSize();
        var splitterSize = this._getSplitterSize();
        var splitterEventsWidth = Math.max(this._EVENTS_MIN_WIDTH, splitterSize);
        
        var splitterPosition = Math.max(this._splitterPosition, this._getMinSplitterPosition());
        var maxPosition = this._getMaxSplitterPosition();
        if (maxPosition > 0) {
            splitterPosition = Math.min(splitterPosition, maxPosition);
        }
        var view1Size = splitterPosition;
        var splitterEventsPosition = splitterPosition - Math.round((splitterEventsWidth - splitterSize) / 2);
        var view2Position = splitterPosition + splitterSize;
        
        // apply the new values
        if (this._isVertical) {
            var minWidth = 0;
            this._splitterEventsElement.style.width = splitterEventsWidth+"px";
            if (this._view1Flexible) {
                // if view 1 is flexible, give fixed right values
                this._view1.style.right = (containerSize - view1Size)+"px";
                this._splitter.style.right = (containerSize - view2Position)+"px";
                this._splitterEventsElement.style.right = (containerSize - view2Position)+"px";
                this._view2.style.width = (containerSize - view2Position)+"px";
                this._view2.style.left = "auto";
                this._view2.style.height = "auto";
                this._splitter.style.left = "auto";
                this._splitterEventsElement.style.left = "auto";
                minWidth = this._view1MinSize + (containerSize - view2Position) + splitterSize;
            } else {
                // view 2 is flexible, fixed left values. No need to specify 'right' value as left & width are already specified.
                this._view1.style.width = view1Size+"px";
                this._view1.style.height = "auto";
                this._splitter.style.left = splitterPosition+"px";
                this._splitterEventsElement.style.left = splitterEventsPosition+"px";
                this._view2.style.left = view2Position+"px";
                minWidth = view1Size + splitterSize + this._view2MinSize;
            }
            // to prevent losing the splitter when resizing the parent
            if (this._shouldSetMinSize) {
                // do it only if the container didn't have a min width initially
                this.viewElement().style.minWidth = minWidth+"px";
            }
        } else {
            var minHeight = 0;
            this._splitterEventsElement.style.height = splitterEventsWidth+"px";
            if (this._view1Flexible) {
                // view 1 is flexible, fixed bottom values
                this._view1.style.bottom = (containerSize - view1Size)+"px";
                this._splitter.style.bottom = (containerSize - view2Position)+"px";
                this._splitterEventsElement.style.bottom = (containerSize - view2Position)+"px";
                this._view2.style.height = (containerSize - view2Position)+"px";
                this._view2.style.top = "auto";
                this._splitter.style.top = "auto";
                this._view2.style.width = "auto";
                this._splitterEventsElement.style.top = "auto";
                minHeight = this._view1MinSize + (containerSize - view2Position) + splitterSize;
            } else {
                // view 2 is flexible, fixed top values. No need to specify 'bottom' value as top & height are already specified.
                this._view1.style.height = view1Size+"px";
                this._view1.style.width = "auto";
                this._splitter.style.top = splitterPosition+"px";
                this._splitterEventsElement.style.top = splitterEventsPosition+"px";
                this._view2.style.top = view2Position+"px";
                minHeight = view1Size + splitterSize + this._view2MinSize;
            }
            // to prevent losing the splitter when resizing the parent
            if (this._shouldSetMinSize) {
                // do it only if the container didn't have a min height initially
                this.viewElement().style.minHeight = minHeight+"px";
            }
        }
    },
    
    getSplitterPosition: function() {
        if (this._isVertical) {
            return this._splitter.offsetLeft;
        } else {
            return this._splitter.offsetTop;
        }
    },
    
    setSplitterPosition: function(newPosition) {
        // constrain the value to the container area
        var maxPosition = this._getMaxSplitterPosition();
        this._splitterPosition = Math.max(Math.min(newPosition, maxPosition), 0);
        this.layoutViews();
        if (this.bindings.splitterPosition) {
            this.bindings.splitterPosition.setValue(this._splitterPosition);
        }
    },
    
    getIsVertical: function() {
        return this._isVertical;
    },
    
    setIsVertical: function(newIsVertical) {
        // set the new value and do the initial layout
        this._isVertical = newIsVertical;
        var containerStyle = Element.getStyles(this.viewElement(), ["min-width", "min-height"])
        if (newIsVertical) {
            // clean up the properties important to the other orientation
            this._view1.style.right = "";
            this._view1.style.height = "";
            this._view2.style.left = "";
            this._view2.style.height = "";
            this._splitter.style.left = "";
            this._splitter.style.right = "";
            this._splitterEventsElement.style.left = "";
            this._splitterEventsElement.style.right = "";
            this._splitterEventsElement.style.height = "";
            // set fixed properties for this orientation
            this._view1.style.bottom = "0px";
            this._view2.style.top = "0px";
            this._splitter.style.top = "0px";
            this._splitter.style.bottom = "0px";
            this._splitterEventsElement.style.top = "0px";
            this._splitterEventsElement.style.bottom = "0px";
            this._splitterEventsElement.style.cursor = "col-resize";
            var minWidth = containerStyle["min-width"];
            this._shouldSetMinSize = !this._inDesign && (minWidth == null || parseInt(minWidth, 10) <= 0);
            if (!this._inDesign) {
                this._splitter.style.height = "auto";
                this._splitter.style.width = this._getSplitterSize()+"px";
            }
        } else {
            // clean up the properties important to the other orientation
            this._view1.style.bottom = "";
            this._view1.style.width = "";
            this._view2.style.top = "";
            this._view2.style.width = "";
            this._splitter.style.top = "";
            this._splitter.style.bottom = "";
            this._splitterEventsElement.style.top = "";
            this._splitterEventsElement.style.bottom = "";
            this._splitterEventsElement.style.width = "";
            // set fixed properties for this orientation
            this._view1.style.right = "0px";
            this._view2.style.left = "0px";
            this._splitter.style.left = "0px";
            this._splitter.style.right = "0px";
            this._splitterEventsElement.style.left = "0px";
            this._splitterEventsElement.style.right = "0px";
            this._splitterEventsElement.style.cursor = "row-resize";
            var minHeight = containerStyle["min-height"];
            this._shouldSetMinSize = !this._inDesign && (minHeight == null || parseInt(minHeight, 10) <= 0);
            if (!this._inDesign) {
                this._splitter.style.width = "auto";
                this._splitter.style.height = this._getSplitterSize()+"px";
            }
        }
        
        // recalculate min/max constraints
        this._updateSizeConstraints();

        // the views themselves need to be laid out too
        this.layoutViews();
        
        if (this.bindings.isVertical) {
            this.bindings.isVertical.setValue(this._isVertical);
        }
    },
    
    getViewAtIndex: function(index) {
        if (index == 0) return this._view1;
        else if (index == 1) return this._view2;
        else return null;
    },
    
    getFlexibleViewIndex: function() {
        return this._view1Flexible ? 0 : 1;
    },
    
    setFlexibleViewIndex: function(newIndex) {
        this._view1Flexible = (newIndex == 0);
        // clean up properties so they don't interfere
        if (this._isVertical) {
            this._view1.style.right = "";
            this._view1.style.width = "";
            this._splitter.style.right = "";
            this._splitter.style.left = "";
            this._splitterEventsElement.style.right = "";
            this._splitterEventsElement.style.left = "";
            this._view2.style.width = "";
            this._view2.style.left = "";
            this.viewElement().style.minWidth = "";
        } else {
            this._view1.style.bottom = "";
            this._view1.style.height = "";
            this._splitter.style.bottom = "";
            this._splitter.style.top = "";
            this._splitterEventsElement.style.bottom = "";
            this._splitterEventsElement.style.top = "";
            this._view2.style.height = "";
            this._view2.style.top = "";
            this.viewElement().style.minHeight = "";
        }

        this.layoutViews();
        
        if (this.bindings.flexibleViewIndex) {
            this.bindings.flexibleViewIndex.setValue(this._view1Flexible ? 0 : 1);
        }
    },
    
    _getContainerSize: function() {
        var actualSize = dashcode.getElementSize(this.viewElement());
        var containerSize = this._isVertical ? actualSize.width : actualSize.height;
        if (containerSize <= 0) {
            containerSize = this._initialContainerSize;
        }
        return containerSize;
    },
    
    _getSplitterSize: function() {
        var actualSize = dashcode.getElementSize(this._splitter);
        var splitterSize = this._isVertical ? actualSize.width : actualSize.height;
        if (splitterSize <= 0) {
            splitterSize = this._initialSplitterSize;
        }
        return splitterSize;
    },
    
    _getMinSplitterPosition: function() {
        var containerSize = this._getContainerSize();
        var splitterSize = this._getSplitterSize();
        var minPosition = this._view1MinSize;
        if (this._view2MaxSize > 0) {
            minPosition = Math.max(minPosition, containerSize - this._view2MaxSize - splitterSize);
        }

        return minPosition;
    },
    
    _getMaxSplitterPosition: function() {
        var containerSize = this._getContainerSize();
        var splitterSize = this._getSplitterSize();
        var maxPosition = containerSize - splitterSize;
        if (this._view1MaxSize > 0) { // constrain from view 1
            maxPosition = Math.min(maxPosition, this._view1MaxSize);
        }
        if (this._view2MinSize > 0) { // constrain from view 2
            maxPosition = Math.min(maxPosition, containerSize - this._view2MinSize - splitterSize);
        }
        return Math.max(maxPosition, 0);
    },
    
    _updateSizeConstraints: function () {
        // get min and max sizes of view1 and view2
        var propertyName = this._isVertical ? "width" : "height";
        var view1Style = Element.getStyles(this._view1, ["min-"+propertyName, "max-"+propertyName]);
        var view2Style = Element.getStyles(this._view2, ["min-"+propertyName, "max-"+propertyName]);
        var value = parseInt(view1Style["min-"+propertyName], 10);
        this._view1MinSize = value > 0 ? value : 0;
        value = parseInt(view1Style["max-"+propertyName], 10);
        this._view1MaxSize = value > 0 ? value : 0;
        value = parseInt(view2Style["min-"+propertyName], 10);
        this._view2MinSize = value > 0 ? value : 0;
        value = parseInt(view2Style["max-"+propertyName], 10);
        this._view2MaxSize = value > 0 ? value : 0;
    },

    _splitterMouseDown: function(event) {
        // register other events to the document so we get them even if the mouse is out
        Event.observe(document, "mousemove", this._splitterMouseMoveHandler);
        Event.observe(document, "mouseup", this._splitterMouseUpHandler);
        
        // get the initial position
        var coords = this._eventCoordinates(event);
        this._dragStartMouseX = coords.x;
        this._dragStartMouseY = coords.y;
        this._dragStartSplitterPosition = this.getSplitterPosition();
        
        // so that the cursor doesn't keep changing as the mouse moves outside of the splitter
        this.viewElement().style.cursor = this._isVertical ? "col-resize" : "row-resize";
        
        Event.stop(event);
    },

    _splitterMouseMove: function(event) {
        var coords = this._eventCoordinates(event);
        var distance = this._isVertical ? coords.x - this._dragStartMouseX : coords.y - this._dragStartMouseY;
        this.setSplitterPosition(this._dragStartSplitterPosition + distance);
    },

    _splitterMouseUp: function(event) {
        // un-register other events
        Event.stopObserving(document, "mousemove", this._splitterMouseMoveHandler);
        Event.stopObserving(document, "mouseup", this._splitterMouseUpHandler);

        // clean up things set on mouse down
        delete this._dragStartMouseX;
        delete this._dragStartMouseY;
        delete this._dragStartSplitterPosition;
        this.viewElement().style.cursor = "";

        Event.stop(event);
    },
    
    _eventCoordinates: function(event) {
        var coords = {x:0, y:0};
        if (event.pageX) {
            coords.x = event.pageX;
            coords.y = event.pageY;
        } else if (event.clientX) {
            coords.x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            coords.y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        return coords;
	},

    _EVENTS_MIN_WIDTH: 5,
    __viewClassName__: "SplitLayout"
});
