/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
function load()
{
    dashcode.setupParts();
    window.mobilAP = new MobilAP.DesktopApplicationController({
        homeList: document.getElementById('homeList').object,
        detailStack: document.getElementById('detailStack').object
    });

    mobilAP.loginController = new MobilAP.DesktopLoginController({
        userID_field: document.getElementById('login_userID'),
        password_field: document.getElementById('login_pword'),
        password_fields: document.getElementById('login_password'),
        login_result: document.getElementById('login_result'),
        createNewUserButton: document.getElementById('loginCreateNewUserButton').object
    });
    mobilAP.addViewController('login', mobilAP.loginController);

    mobilAP.logoutController = new MobilAP.DesktopLoginController({
        viewDidLoad: function() {
            document.getElementById('logoutUserText').innerHTML = 'You are logged in as ' + mobilAP.user.email;
        }
    });
    mobilAP.addViewController('logout', mobilAP.logoutController);
    
    mobilAP.welcomeController = {
        viewDidLoad: function() {
            MobilAP.loadContent('welcome', base_url + 'data/welcome.php');
        }
    }
    mobilAP.addViewController('welcome', mobilAP.welcomeController);
    
    
    mobilAP.scheduleController = new MobilAP.DesktopScheduleController();
    mobilAP.addViewController('schedule', mobilAP.scheduleController);
    
    mobilAP.sessionController = new MobilAP.DesktopSessionController({
        session_tabbar: document.getElementById('sessionTabbar').object,
        session_stack: document.getElementById('sessionStack').object
    });
    mobilAP.addViewController('session', mobilAP.sessionController);

    mobilAP.sessionAdminController = new MobilAP.DesktopSessionAdminController({
    });
    mobilAP.addViewController('newSessionAdmin', mobilAP.sessionAdminController);
    
    mobilAP.sessionsAdminController = new MobilAP.DesktopSessionsAdminController('adminSessionsList', {
         editButton: document.getElementById('adminSessionsEditButton').object
        }
    );
    

    mobilAP.scheduleTypeController = new MobilAP.DesktopScheduleTypeController('scheduleTypeList', {
    	 scheduleController: mobilAP.scheduleController}
    );

    mobilAP.sessionInfoController = new MobilAP.DesktopSessionInfoController({
        session_schedule_box: document.getElementById('sessionInfoSchedule'),
        session_date: document.getElementById('sessionInfoDate'),
        session_start: document.getElementById('sessionInfoStart'),
        session_end: document.getElementById('sessionInfoEnd'),
        session_room: document.getElementById('sessionInfoRoom'),
        session_description: document.getElementById('sessionInfoDescription'),
        session_presenters: document.getElementById('sessionInfoPresenters'),
        sessionController: mobilAP.sessionController
    });
    mobilAP.sessionController.addViewController('info', mobilAP.sessionInfoController);

    mobilAP.sessionLinksController = new MobilAP.DesktopSessionLinksController(
        'sessionLinksList', {
        sessionLinksNotice: document.getElementById('sessionLinksNotice'), 
    	 sessionController: mobilAP.sessionController
    });
    mobilAP.sessionController.addViewController('links', mobilAP.sessionLinksController);


    mobilAP.scheduleListController = new MobilAP.DesktopScheduleListController('scheduleList', {
        scheduleListDate: document.getElementById('scheduleListDate'),
        scheduleCalendar: document.getElementById('scheduleCalendar'),
    	 scheduleController: mobilAP.scheduleController,
    	 sessionController: mobilAP.sessionController,
         editButton: document.getElementById('scheduleEditButton').object
        }
    );
    mobilAP.addViewController('schedule', mobilAP.scheduleListController);

    mobilAP.scheduleCalendarController = new MobilAP.DesktopScheduleCalendarController('scheduleCalendar',{
        scheduleController: mobilAP.scheduleController
    });

    scheduleDate = new MobilAP.DatePicker('scheduleAdminDateContainer');

    mobilAP.scheduleAdminController = new MobilAP.DesktopScheduleAdminController({
        scheduleController: mobilAP.scheduleController,
        dateController: scheduleDate,
        startTimeController: new MobilAP.TimePicker('scheduleAdminStartTimeContainer', {datePicker: scheduleDate}),
        endTimeController: new MobilAP.TimePicker('scheduleAdminEndTimeContainer', {datePicker: scheduleDate}),
        sessionListController: new MobilAP.ListController('scheduleAdminSessions'),
        detailField: document.getElementById('scheduleAdminDetailField'),
        roomField: document.getElementById('scheduleAdminRoomField')
    });
    mobilAP.addViewController('scheduleAdmin', mobilAP.scheduleAdminController);


    mobilAP.announcementsController = new MobilAP.DesktopAnnouncementController('announcementsList', {
        announcementPanel: document.getElementById('announcementsPanel'),
        announcementsNotice: document.getElementById('announcementsNotice')
        }
    );
    mobilAP.addViewController('announcements', mobilAP.announcementsController);

    mobilAP.profileController = new MobilAP.DesktopProfileController({
        profileImage: document.getElementById('directoryProfileImage').object,
        profileFirstName: document.getElementById('directoryProfileFirstName'),
        profileLastName: document.getElementById('directoryProfileLastName'),
        profileOrganization: document.getElementById('directoryProfileOrganization'),
        profileEmail: document.getElementById('directoryProfileEmail')
	});

    mobilAP.directoryController = new MobilAP.DesktopDirectoryController('directoryList',{
    	listPanel: document.getElementById('directoryListPanel'),
        profilePanel: document.getElementById('directoryProfilePanel'),
        profileController: mobilAP.profileController,
        profileEditButton: document.getElementById('directoryProfileAdminEditButton').object
    });
    mobilAP.addViewController('directory', mobilAP.directoryController);

    mobilAP.directoryAdminController = new MobilAP.DesktopDirectoryAdminController({
        directoryController: mobilAP.directoryController,
        profileImage: document.getElementById('directoryProfileImage').object,
        profileFirstNameField: document.getElementById('directoryProfileFirstNameField'),
        profileLastNameField: document.getElementById('directoryProfileLastNameField'),
        profileOrganizationField: document.getElementById('directoryProfileOrganizationField'),
        profileEmailField: document.getElementById('directoryProfileEmailField'),
        profileAdminSwitch: new MobilAP.Switch('directoryProfileAdminSwitch'),
        profileUploadForm: document.getElementById('directoryProfileUploadForm'),
        profileImageFile: document.getElementById('directoryProfileImageFile')
    });
    
    mobilAP.sessionEvaluationController = new MobilAP.DesktopSessionEvaluationController({
        sessionController: mobilAP.sessionController,
        evaluationQuestionText: document.getElementById('sessionEvaluationQuestionText'),
        evaluationQuestionResponses: document.getElementById('sessionEvaluationQuestionResponses').object,
        evaluationQuestionTextResponse: document.getElementById('sessionEvaluationQuestionTextResponse'),
        evaluationQuestionPreviousButton: document.getElementById('sessionEvaluationQuestionPreviousButton'),
        evaluationQuestionNextButton: document.getElementById('sessionEvaluationQuestionNextButton'),
        evaluationQuestionFinishButton: document.getElementById('sessionEvaluationQuestionFinishButton')
    });
    mobilAP.sessionController.addViewController('evaluation', mobilAP.sessionEvaluationController);
    
    mobilAP.sessionQuestionAdminController = new MobilAP.DesktopSessionQuestionAdminController({ 
        sessionController: mobilAP.sessionController,
        questionTextField: document.getElementById('sessionQuestionAdminQuestionTextField'),
        questionActiveSwitch: new MobilAP.Switch('sessionQuestionAdminQuestionActive'),
        questionMinChoices: document.getElementById('sessionQuestionAdminQuestionMinChoices'),
        questionMaxChoices: document.getElementById('sessionQuestionAdminQuestionMaxChoices'),
        questionResponsesList: document.getElementById('sessionQuestionAdminResponsesList').object,
        questionResponsesAddField: document.getElementById('sessionQuestionAdminResponsesAddField')
    });
    mobilAP.addViewController('sessionQuestionAdmin', mobilAP.sessionQuestionAdminController);
    
    mobilAP.questionsController = new MobilAP.DesktopQuestionsController('sessionQuestionsList', {
        sessionQuestionsNotice: document.getElementById('sessionQuestionsNotice'), 
        sessionQuestionAdminController: mobilAP.sessionQuestionAdminController,
        sessionController: mobilAP.sessionController,
        editButton:document.getElementById('sessionQuestionsEditButton').object
        });
    mobilAP.sessionController.addViewController('questions', mobilAP.questionsController);

    mobilAP.questionController = new MobilAP.DesktopQuestionController({ 
        stack: document.getElementById('sessionQuestionStack').object,
        sessionController: mobilAP.sessionController,
        questionText: document.getElementById('sessionQuestionQuestionText'),
        questionSelectMessageText: document.getElementById('sessionQuestionAskSelectMessage'),
        responses_list: document.getElementById('sessionQuestionAskResponsesList').object,
        results_list: document.getElementById('sessionQuestionResultsList').object,
        results_chart: document.getElementById('sessionQuestionResultsChart')
        }
    );
    mobilAP.sessionController.addViewController('question', mobilAP.questionController);
    
    mobilAP.userProfileController = new MobilAP.DesktopUserProfileController({
        passwordField: document.getElementById('profilePasswordField'),
        passwordVerifyField: document.getElementById('profilePasswordVerifyField')
    });
    mobilAP.addViewController('profile', mobilAP.userProfileController);

    mobilAP.adminController = new MobilAP.DesktopAdminController({
        admin_tabbar: document.getElementById('adminTabbar').object,
        admin_stack: document.getElementById('adminTabs').object,
        timeZoneContainer: document.getElementById('configTIMEZONE_container'),
        view: document.getElementById('admin')
    });
    mobilAP.addViewController('admin', mobilAP.adminController);

    mobilAP.contentAdminController = new MobilAP.DesktopContentAdminController({
        webclipUploadForm: document.getElementById('adminContentUploadForm'),
        webclipImage: document.getElementById('adminContentWebClipIconImage').object,
        webclipUploadFile: document.getElementById('adminContentWebclipIcon')
    });
    
    mobilAP.homeAdminController = new MobilAP.DesktopHomeAdminController({
        }
    );
    mobilAP.adminController.addViewController('Home', mobilAP.homeAdminController);

    mobilAP.evaluationQuestionAdminController = new MobilAP.DesktopEvaluationQuestionAdminController('adminEvaluationQuestionsList', {
       adminController: mobilAP.adminController,
       questionNotice: document.getElementById('adminEvaluationQuestionNotice'),
       questionTextField : document.getElementById('adminEvaluationQuestionsQuestionText'),
       questionResponseTypeField : document.getElementById('adminEvaluationQuestionsQuestionResponseType'),
       questionResponses : document.getElementById('adminEvaluationQuestionsQuestionResponses'),
       questionResponsesList : document.getElementById('adminEvaluationQuestionsQuestionResponsesList').object,
       questionAddResponseField : document.getElementById('adminEvaluationQuestionsQuestionResponseAddField')
    });
    mobilAP.adminController.addViewController('EvaluationQuestions', mobilAP.evaluationQuestionAdminController);
    
    mobilAP.sessionPresentersAdminController = new MobilAP.DesktopSessionPresentersAdminController({
       presentersList: document.getElementById('sessionAdminPresentersList').object,
       presentersAdd: document.getElementById('sessionAdminPresentersAddField'),
       presentersAddList: document.getElementById('sessionAdminPresentersAddList').object,
       sessionController: mobilAP.sessionController
    });

    mobilAP.setupController = {
        viewDidLoad: function(viewID)
        {
		    mobilAP.serialController.stopReloadTimer();
            var script = document.createElement("script");
            script.src = "../mobilAP/setup/mobilAP_setup.js";
            document.body.appendChild(script);
        }
    }
    mobilAP.addViewController('setup', mobilAP.setupController);
    
    mobilAP.serialController = new MobilAP.DesktopSerialController({
    });
    mobilAP.serialController.setReloadTimer(5);
    
}

MobilAP.DesktopApplicationController = Class.create(MobilAP.ApplicationController, {
    login: function() {
        this.loadView('login', 'Login');
    },
    logout: function() {
        this.loadView('logout', 'Logout');
    },          
    indexForView: function(view) {
        var homeContent = dashcode.getDataSource('homeData').content();
        if (homeContent) {
            for (var i=0 ; i<homeContent.length; i++) {
                if (homeContent[i].id == view) {
                    return i;
                }
            }
        }
        this.log("Unable to find index for view " + view);
        return null;
    },
    loadViewIndex: function(index) {
        if (this.homeList.rows[index]) {
            this.homeList.setSelectionIndexes([index]);
        }
    },
    loadView: function(toView, title, force) {
        force = 'undefined' == typeof force ? false : force;
        if (!document.getElementById(toView)) {
            throw("View " + toView + " not found");
        }
        
        if (this.getConfig('CONTENT_PRIVATE') && !this.isLoggedIn() && toView != 'login') {
            this.loadViewIndex(this.indexForView('login'));
            this.loginController.setLoginResult('You must login to view content on this site');
            return;
        }
        
        if (force || (this.detailStack.getCurrentView().id != toView)) {
            this.viewDidUnload(this.detailStack.getCurrentView().id);
            this.detailStack.setCurrentView(toView, true);
            this.viewDidLoad(toView);
        }
    },
    homeSelected: function(change, keyPath) {
        var selectedObjects = this.homeList.selectedObjects();
        if (selectedObjects && selectedObjects.length==1) {
            this.loadView(selectedObjects[0].valueForKey('id'), selectedObjects[0].valueForKey('title'));
        }
    },
    configUpdated: function(change,keyPath) {
        this.base(change,keyPath);
        this.checkPrivate();
    },
    homeUpdated: function(change,keyPath) {
        this.checkPrivate();
    },
    checkPrivate: function() {
        if (this.getConfig('CONTENT_PRIVATE') && !this.isLoggedIn()) {
            this.loadViewIndex(this.indexForView('login'));
            this.loginController.setLoginResult('You must login to view content on this site');
        }
    },
    userUpdated: function(change,keyPath) {
        this.base(change,keyPath);
        var oldUser = change.oldValue ? new MobilAP.User(change.oldValue) : new MobilAP.User();
        var newUser = change.newValue ? new MobilAP.User(change.newValue) : new MobilAP.User();
        
        if (oldUser.userID != newUser.userID) {
            dashcode.getDataSource('session').queryUpdated();
            dashcode.getDataSource('homeData').queryUpdated();
            this.loadViewIndex(0);
        }
        
        this.checkPrivate();
    },
    constructor: function(params)
    {
        this.product = 'safari';
        this.base(params);
        this.homeList.addObserverForKeyPath(this, this.homeSelected, "selectionIndexes");
        dashcode.getDataSource('homeData').addObserverForKeyPath(this, this.homeUpdated, "content");
    }
    
});

MobilAP.DesktopLoginController= Class.create(MobilAP.LoginController, {
    loginHandler: function(json) {
        var result = this.base(json);
        this.createNewUserButton.viewElement().style.display='none';
        if (this.isError(result)) {
            this.setLoginResult(json.error_message);
            switch (result.error_code)
            {
                case this.CREATE_NEW_USER:
                    this.createNewUserButton.viewElement().style.display='block';
                    break;
                case this.ERROR_REQUIRES_PASSWORD:
                    this.password_fields.style.display='block';
                    break;
            }
        }
    },
    logoutHandler: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            this.setLoginResult(json.error_message);
        }
    },
    in_progress: function(bool) {
        this.setLoginResult(bool ? 'Logging in...' : '');
    },
    setLoginResult: function(message) {
        this.login_result.innerHTML = message;
    },
    viewDidLoad: function() {
        this.userID_field.value = '';
        this.password_field.value = '';
        this.setLoginResult('');
        if (!this.getConfig('USE_PASSWORDS')) {
        	this.password_fields.style.display = 'none';
        }
        this.createNewUserButton.viewElement().style.display='none';
    }
});

MobilAP.DesktopSerialController = Class.create(MobilAP.SerialController, {
});


MobilAP.DesktopUserProfileController = Class.create(MobilAP.UserProfileController, {
    setUser: function(user) {
        this.base(user);
        
    },
    viewDidLoad: function() {
        this.passwordField.value='';
        this.passwordVerifyField.value='';
    }
});

MobilAP.DesktopScheduleTypeController = Class.create(MobilAP.ListController, {
    scheduleTypes: [ {label:'List',value:'scheduleList'},{label:'Calendar',value:'scheduleDay'}],
    numberOfRows: function() {
        return this.scheduleTypes.length;
    },
    objectForRow: function(rowIndex) {
    },
    representationForRow: function(rowIndex) {
        return this.scheduleTypes[rowIndex];
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        templateElements.scheduleTypeListLabel.innerHTML = this.scheduleTypes[rowIndex].label;
        var self = this;
        rowElement.onclick = function() {
            self.scheduleController.setScheduleType(self.scheduleTypes[rowIndex].value);
        }
	},
    setScheduleType: function(scheduleType) {
        for (var i=0; i<this.scheduleTypes.length; i++) {
            if (this.scheduleTypes[i].value==scheduleType) {
                this.object.setSelectionIndexes([i]);
            }
        }
    },
    scheduleTypeUpdated: function(change, keyPath) {
        this.setScheduleType(change.newValue);
    },
    constructor: function(part_id, params) {
        this.base(part_id, params);
        this.object.setDataSource(this);
        this.setScheduleType(this.scheduleController.scheduleType());
        this.scheduleController.addObserverForKeyPath(this, this.scheduleTypeUpdated, "scheduleType");
    }
});

MobilAP.DesktopScheduleController = Class.create(MobilAP.ScheduleController, {
    viewDidLoad: function() {
        this.setScheduleType(this.scheduleType());
    },
    constructor: function(params) {
        this.base(params);
        this.setScheduleType('scheduleDay');
    }
});

MobilAP.DesktopSessionPresentersAdminController = Class.create(MobilAP.SessionPresentersAdminController, {
    viewDidLoad: function() {
        this.presentersAddList.clearSelection();
    },
    objectForRow: function(rowIndex) {
    },
    representationForRow: function(rowIndex) {
        return this.foundUsers[rowIndex];
    },
    clearFoundUsers: function() {
        this.base();
        this.presentersAddList.reloadData();
        this.presentersAdd.value = '';
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        var user = this.foundUsers[rowIndex];
        templateElements.sessionAdminPresentersAddName.innerHTML = user.getFullName() + ' (' + user.email + ')';
        var self = this;
        templateElements.sessionAdminPresentersAddButton.onclick = function() {
            self.sessionController.addPresenter(user.userID);
            self.clearFoundUsers();
        }
	},
    addFieldUpdated: function(e) {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = false;
        }
        setTimeout(this.findUsers.bind(this),200,this.presentersAdd.value);
    },
    setFoundUsers: function(users) {
        this.base(users);
        this.presentersAddList.reloadData();
    },
    numberOfRows: function() {
        return this.foundUsers.length;
    },
    constructor: function(params) {
        this.base(params);
        this.presentersAdd.onkeyup = this.addFieldUpdated.bind(this);
        this.presentersAddList.setDataSource(this);
    }
});

MobilAP.DesktopSessionQuestionAdminController = Class.create(MobilAP.SessionQuestionAdminController, {
    mode: 'add',
    question_id: null,
    question: new MobilAP.SessionQuestion(),
    _processXHR: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    viewDidLoad: function() {
        this.mode = this.question.question_id ? 'edit' : 'add';
        this.question_id = this.question.question_id;
        this.questionResponsesAddField.value = '';
    },
    setQuestion: function(question) {
        this.question = question;
        this.questionActiveSwitch.setValue(this.question.question_active);
        this.questionTextField.value = this.question.question_text;
        this.questionMinChoices.selectedIndex = this.question.question_minchoices;
        this.questionMaxChoices.selectedIndex = this.question.question_maxchoices-1;
        this.questionResponsesList.reloadData();
    },
    save: function(callback) {
        var result = this.sessionController[this.mode=='add' ? 'addQuestion' : 'updateQuestion'](this.question, callback);
        return result;
    },
    numberOfRows: function() {
        return this.question.responses.length;
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        templateElements.sessionQuestionAdminResponseTitle.innerHTML = this.question.responses[rowIndex].response_text
        var self = this;
        templateElements.sessionQuestionAdminResponsesRemoveButton.onclick = function() {
            self.removeResponse(rowIndex);
        }
	},
    removeResponse: function(index) {
        var result = this.question.removeResponse(index);
        if (this.isError(result)) {
            return result;
        }
        this.questionResponsesList.reloadData();
        
    },
    addResponse: function(response_text) {
        var result = this.question.addResponse(response_text);
        if (this.isError(result)) {
            return result;
        }
        this.questionResponsesList.reloadData();
    },
    constructor: function(params) {
        this.base(params);
        this.questionResponsesList.setDataSource(this);
    }
});

MobilAP.DesktopSessionInfoController = Class.create(MobilAP.SessionInfoController, {
        viewDidLoad: function() {
            this.session_presenters.style.display = this.sessionController.session.session_presenters.length>0 ? 'block' : 'none';
            
            if (this.getConfig('SINGLE_SESSION_MODE')) {
                this.session_schedule_box.style.display='none';
            } else {
                this.session_schedule_box.style.display='block';
                var _timeTransformer = new timeTransformer();
                var _dateTransformer = new shortDateTransformer();
                this.session_date.innerHTML = _dateTransformer.transformedValue(this.sessionController.scheduleData.start_time);
                this.session_start.innerHTML = _timeTransformer.transformedValue(this.sessionController.scheduleData.start_time);
                this.session_end.innerHTML = _timeTransformer.transformedValue(this.sessionController.scheduleData.end_time);
                this.session_room.innerHTML = this.sessionController.scheduleData.room;
            }
        }
});


MobilAP.DesktopSessionsAdminController = Class.create(MobilAP.SessionsAdminController, {
	numberOfRows: function() {
        try {
            return this.sessions.length;
        } catch(e) {
            return 0;
        }
	},
    // this method has to be there. For some reason Dashcode framework looks for this method, but actuallly CALLS representationForRow
    objectForRow: function(rowIndex) {
    },
    representationForRow: function(rowIndex) {
        return this.sessions[rowIndex];
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
		var session = this.sessions[rowIndex];
		var self = this;
		templateElements.adminSessionsTitle.innerHTML = session.session_title;
		templateElements.adminSessionsDeleteButton.onclick = function() {
			if (confirm('Are you sure you wish to remove this session? Any schedule items that use it will also be removed.')) {
				self.deleteSession(session, function(result) {
					if (mobilAP.isError(result)) {
						alert(result.error_message);
					}  else {
						alert("Session deleted");
					}
				});
			}
		}
	},
    constructor: function(part_id,params) {
        this.base(part_id,params);
        this.object.setDataSource(this);
    }
});
MobilAP.DesktopSessionAdminController = Class.create(MobilAP.SessionAdminController, {
    _processXHR: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    }
});
MobilAP.DesktopScheduleAdminController = Class.create(MobilAP.ScheduleAdminController, {
    mode: 'add',
    schedule_id: null,
    viewDidLoad: function() {
        var item = this.scheduleController.scheduleItem();
        this.mode = item.schedule_id ? 'edit' : 'add';
        this.schedule_id = item.schedule_id;
        this.dateController.setDate(new Date(item.start_time));
        this.startTimeController.setDate(new Date(item.start_time));
        this.endTimeController.setDate(new Date(item.end_time));
        this.sessionListController.clearSelection();
        try {
            for (var i=0; i< this.sessionListController.content().length; i++) {
                var contentItem = this.sessionListController.content().objectsAtIndexes([i])[0];
                if (contentItem.session_id == item.session_id) {
                    this.sessionListController.setSelectionIndexes([i]);
                    i = this.sessionListController.content().length;
                }
            }
        } catch(e) {}
        this.detailField.value = item.detail;
        this.roomField.value = item.room;
    },
    _processXHR: function(json,callback) {
        var result = this.base(json,callback);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    save: function(callback) {
        if (this.sessionListController.selectedObjects().length!=1) {
            alert('Please select a session');
            return;
        }

        var schedule = {
            schedule_id: this.schedule_id,
            start_time: this.startTimeController.date().timetostr(),
            end_time: this.endTimeController.date().timetostr(),
            session_id: this.sessionListController.selectedObjects()[0].valueForKey('session_id'),
            detail: this.detailField.value,
            room: this.roomField.value
        }

        var result = this.scheduleController[this.mode=='add' ? 'addScheduleItem' : 'updateScheduleItem'](schedule, callback);
        return result;
    }

});

MobilAP.DesktopScheduleListController = Class.create(MobilAP.ScheduleListController, {

    viewDidLoad: function() {
        this.setEditMode(false);
    },
    constructor: function(part_id, parameters) {
        this.base(part_id, parameters);
        //this prevents the list from reusing cells. Necessary since caching doesn't reset class names
        this.object.maximumCachedRows = -1;
        this.object.setDataSource(this);
        
        this.scheduleController.addObserverForKeyPath(this, this.dateUpdated, "date");
        this.scheduleController.addObserverForKeyPath(this, this.scheduleUpdated, "schedule");
        this.scheduleController.addObserverForKeyPath(this, this.scheduleTypeUpdated, "scheduleType");
    },
    dateUpdated: function() {
        var transformer = new longDateTransformer();
        this.scheduleListDate.innerHTML = transformer.transformedValue(this.scheduleController.date());
        this.object.reloadData();
    },
    scheduleTypeUpdated: function() {
        this.scheduleCalendar.style.display = (this.scheduleController.scheduleType() == 'scheduleList') ? 'none' : '';
        this.scheduleListDate.style.display = (this.scheduleController.scheduleType() == 'scheduleList') ? 'none' : '';
        this.object.reloadData();
    },
    scheduleUpdated: function(change, keyPath) {
        this.object.reloadData();
    },
	numberOfRows: function() {
        try {
            return this.scheduleController.schedule().length;
        } catch(e) {
            return 0;
        }
	},
    // this method has to be there. For some reason Dashcode framework looks for this method, but actuallly CALLS representationForRow
    objectForRow: function(rowIndex) {
    },
    representationForRow: function(rowIndex) {
        return this.scheduleController.schedule()[(rowIndex)];
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        var item = this.scheduleController.schedule()[rowIndex];
        rowElement.className = templateElements.scheduleListRow.className + ' schedule_' + item.schedule_type;
        if (item.schedule_type=='date') {
            templateElements.scheduleListTitle.innerHTML = Date.daysLong[item.date.getDay()] + ' ' + Date.monthsLong[item.date.getMonth()] + ' ' + item.date.getDate() + ', ' + item.date.getFullYear();
            templateElements.scheduleListStart.innerHTML = '';
            templateElements.scheduleListDetail.innerHTML = '';
            return;
        }

        var transformer = new timeTransformer();
        var self = this;
        templateElements.scheduleListStart.innerHTML = transformer.transformedValue(item.start_time);
        templateElements.scheduleListTitle.innerHTML = item.title;
        templateElements.scheduleListDetail.innerHTML = item.detail;
        templateElements.scheduleListEditButton.onclick = function() {
            self.scheduleController.setScheduleItem(item);
            mobilAP.loadView('scheduleAdmin');
        }
	},
    rowSelected: function(change, keyPath) {
    
    	this.base(change,keyPath);
        if (!this.selectedObject) {
            return;
        }

        if (this.editMode) {
         //   this.object.clearSelection();
            return;
        }
        
        switch (this.selectedObject.schedule_type)
        {
            case 'date':
                this.clearSelection();
                return;
                break;
            case 'session':
                this.sessionController.setScheduleData(this.selectedObject);
                this.sessionController.setSession(this.selectedObject.session_id);
                mobilAP.loadView('session');
                break;
            case 'session_group':
                throw('need to handle session group');
        }
    }
	
});

MobilAP.DesktopScheduleCalendarController = Class.create(MobilAP.ScheduleCalendarController, {
});

MobilAP.DesktopSessionEvaluationController = Class.create(MobilAP.SessionEvaluationController, {
    _processXHR: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    setQuestion: function(question) {
        this.base(question);
        this.evaluationQuestionText.innerHTML = this.question.question_text;
        this.evaluationQuestionResponses.reloadData();
        this.evaluationQuestionTextResponse.value = '';
        switch (this.question.question_response_type)
        {
            case 'M':
                this.evaluationQuestionResponses.viewElement().style.display = 'block';
                this.evaluationQuestionTextResponse.style.display = 'none';
                if (this.questionIndex in this.responses) {
                    var response = this.responseForResponseValue(this.responses[this.questionIndex]);
                    this.evaluationQuestionResponses.setSelectionIndexes([response.response_index]);
                }
                break;
            case 'T':
                this.evaluationQuestionResponses.viewElement().style.display = 'none';
                this.evaluationQuestionTextResponse.style.display = 'block';
                if (this.questionIndex in this.responses) {
                    this.evaluationQuestionTextResponse.value=this.responses[this.questionIndex];
                }
                break;
        }
        this.evaluationQuestionNextButton.style.display = this.questionIndex < (this.content().length-1) ? 'block' : 'none';
        this.evaluationQuestionPreviousButton.style.display = this.questionIndex > 0 ? 'block' : 'none';
        this.evaluationQuestionFinishButton.style.display = this.questionIndex == (this.content().length-1) ? 'block' : 'none';
    },
    numberOfRows: function() {
        return this.question ? this.question.responses.length : 0;
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        templateElements.evaluationQuestionResponsesText.innerHTML = this.question.responses[rowIndex].response_text;
        var self = this;
        rowElement.onclick = function() {
            self.setResponse(self.questionIndex, self.question.responses[rowIndex].response_value);
        }
	},
    viewDidLoad: function() {
        if (this.sessionController.evaluationCompleted()) {
            this.sessionController.loadView('evaluation_thanks', false);
        } else {
            this.setQuestionIndex(0);
        }
    },
    dataSourceUpdated: function(change, keyPath) {
        this.base(change, keyPath);
        this.setQuestionIndex(0);
    },
    constructor: function(params) {
        this.base(params);
        this.evaluationQuestionResponses.setDataSource(this);
        var self = this;
        this.evaluationQuestionTextResponse.onchange = function() {
            self.setResponse(self.questionIndex, this.value);
        }
    }
});

MobilAP.DesktopSessionController = Class.create(MobilAP.SessionController, {
    active_tab_id: 'info',
    active_tab_index: 0,
    active_view: 'info',
    viewControllers: {},
    tabIndexForId: function(tab_id) {
        var tabs = session_tabs.tabs();
        for (var i=0; i< tabs.length; i++) {
            if (tabs[i].tab_id==tab_id) {
                return i;
            }
        }
    },
    _processXHR: function(json,callback) {
        var result = this.base(json,callback);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    setSession: function(session_id) {
//        this.setTabIndex(0);
        this.base(session_id);
    },
    setTabID: function(tab_id) {
        var tab_index = this.tabIndexForId(tab_id);
        if (typeof tab_index != 'undefined') {
            return this.setTabIndex(tab_index);
        }
        
        throw ("Unable to get index for " + tab_id);
    },
    addViewController: function(view_id, controller) {
        if (!(view_id in this.viewControllers)) {
            this.viewControllers[view_id] = [];
        }

        this.viewControllers[view_id].push(controller);
    },
    sessionUpdated: function(change, keyPath) {
        this.base(change, keyPath);
        this.session_tabbar.reloadData();
        this.session_tabbar.setSelectionIndexes([this.tabIndexForId(this.active_tab_id)]);
        this.loadView(this.active_view);
    },
    subViewDidLoad: function(toView) {
		if (toView in this.viewControllers) {
			for (var i=0; i<this.viewControllers[toView].length;i++) {
				try {
					this.viewControllers[toView][i].viewDidLoad(toView);
				} catch(e) {
				}
			}
		}
    },
    subViewDidUnload: function(toView) {
		if (toView in this.viewControllers) {
			for (var i=0; i<this.viewControllers[toView].length;i++) {
				try {
					this.viewControllers[toView][i].viewDidUnload(toView);
				} catch(e) {
				}
			}
		}
    },
    loadView: function(view) {
        var toView = 'session_' + view;
        if (this.getCurrentView().id != toView) {
            this.subViewDidUnload(this.active_view);
            this.setCurrentView(toView);
            this.active_view = view
            this.subViewDidLoad(view);
        } else {
            this.active_view = view
        }
    },
    setTabIndex: function(tab_index) {
        var tab_id = session_tabs.tabs()[tab_index].tab_id;
        this.loadView(tab_id);
        this.active_tab_index = tab_index;
        this.active_tab_id = tab_id
        this.session_tabbar.reloadData();
        this.session_tabbar.setSelectionIndexes([tab_index]);
    },
    getCurrentView: function() {
        return this.session_stack.getCurrentView();
    },
    setCurrentView: function(view_id, animate) {
        this.session_stack.setCurrentView(view_id, animate);
    },
    viewDidUnload: function() {
        this.stopReloadTimer();
    },
    viewDidLoad: function(view_id) {
        this.subViewDidLoad(this.active_view);
        MobilAP.setClassName(view_id,'mobilAP_sessionadmin',this.isAdmin());
    },
    addLink: function(link_url, link_title) {
        var result = this.base(link_url, link_title);
        if (this.isError(result)) {
            if (result.error_code==mobilAP.ERROR_NO_USER) {
                mobilAP.login();
            }
            alert(result.error_message);
            return;
        }
        this.loadView('links');
    },
    postDiscussion: function(post_text) {
        var result = this.base(post_text);
        if (this.isError(result)) {
            if (result.error_code==mobilAP.ERROR_NO_USER) {
                mobilAP.login();
            }
            alert(result.error_message);
            return;
        }
    },
    userUpdated: function(change, keyPath) {
        if (this.active_tab_id=='admin' && this.isAdmin()) {
            this.setTabIndex(0);
        }
    },
    constructor: function(params) {
        this.base(params);
        dashcode.getDataSource('user').addObserverForKeyPath(this, this.userUpdated, "content");

    }
    
});

MobilAP.DesktopAnnouncementController = Class.create(MobilAP.AnnouncementController, {
    _processXHR: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    save: function() {
        if (this.announcement.announcement_id) {
            this.updateAnnouncement(this.announcement);
        } else {
            this.addAnnouncement(this.announcement);
        }
    },
    viewDidLoad: function() {
        this.object.clearSelection();
        this.setAnnouncement(new MobilAP.Announcement());
        this.announcementPanel.style.display = 'none';
        this.announcementsNotice.style.display = this.content().length == 0 ? '' : 'none';
        MobilAP.setClassName(this.announcementPanel, 'mobilAP_admin', mobilAP.isAdmin());
    },
    rowSelected: function(change, keyPath) {
        this.base(change, keyPath);
        this.announcementPanel.style.display = this.object.selectionIndexes().length > 0 ? '' : 'none';
        var selectedObjects = this.object.selectedObjects();
        if (selectedObjects && (1 == selectedObjects.length)){
            this.setAnnouncement(new MobilAP.Announcement(selectedObjects[0]));
        } else {
            this.announcementPanel.style.display = 'none';
            this.setAnnouncement(new MobilAP.Announcement());
        }
    }
});

MobilAP.DesktopSessionLinksController = Class.create(MobilAP.LinksListController, {
    numberOfRows: function() {
        return this.sessionController.session.session_links.length;
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        var self = this;
        var link = this.sessionController.session.session_links[rowIndex];
        templateElements.sessionLinksListTitle.innerHTML = link.link_text;
        templateElements.sessionLinksListURL.innerHTML = link.link_url;
        templateElements.sessionLinksListDeleteButton.onclick = function() {
            if (confirm('Are you sure you wish to delete this link?')) {
                self.sessionController.deleteLink(link.link_id);
            }
        }
	},
    objectForRow: function() {
    },
    representationForRow: function(rowIndex) {
        return this.sessionController.session.session_links[rowIndex];
    },
    viewDidLoad: function() {
        MobilAP.setClassName(this.id, 'mobilAP_adminmode', this.sessionController.isAdmin());
        this.sessionLinksNotice.style.display = this.content().length == 0 ? '' : 'none';
    }, 
    constructor: function(part_id, params) {
        this.base(part_id, params);
        this.sessionController.addObserverForKeyPath(this, this.reloadData, "session");
        this.object.setDataSource(this);
    }
});

MobilAP.DesktopQuestionsController = Class.create(MobilAP.ListController, {
    _processXHR: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    setEditMode: function(edit_mode) {
    	this.base(edit_mode);
    	this.reloadData();
    },
    viewDidLoad: function() {
        this.setEditMode(false);
        this.reloadData();
        this.sessionQuestionsNotice.style.display = this.content().length == 0 ? '' : 'none';
        this.editButton.viewElement().style.display = this.content().length == 0 ? 'none' : '';
    },
    rowSelected: function(change, keyPath) {
        this.base(change, keyPath);

        var selectedObjects = this.object.selectedObjects();
        if (selectedObjects && (1 == selectedObjects.length)){
            mobilAP.questionController.setQuestion(new MobilAP.SessionQuestion(selectedObjects[0]));
            mobilAP.sessionController.loadView('question');
        }    
    },
    objectForRow: function() {
    },
    representationForRow: function(rowIndex) {
        var question = new MobilAP.SessionQuestion(this.sessionController.session.session_questions[rowIndex]);
        return question;
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        var self = this;
        var question = this.representationForRow(rowIndex);
        MobilAP.setClassName(rowElement,'question_inactive', !question.question_active);
        templateElements.sessionQuestionsListQuestionText.innerHTML = question.question_text;
        templateElements.sessionQuestionsListEditButton.onclick = function() {
            self.sessionQuestionAdminController.setQuestion(self.representationForRow(rowIndex));
            mobilAP.loadView('sessionQuestionAdmin');
        }
	},
    numberOfRows: function() {
        return this.sessionController.session.session_questions.length;
    },
    constructor: function(part_id, params) {
        this.base(part_id, params);
        this.object.setDataSource(this);
        this.sessionController.addObserverForKeyPath(this, this.reloadData, "session");
    }
});

MobilAP.DesktopProfileController = Class.create(MobilAP.ProfileController, {
    setUser: function(user) {
    	this.base(user);
		this.profileFirstName.innerHTML = this.user.FirstName;
		this.profileLastName.innerHTML = this.user.LastName;
		this.profileOrganization.innerHTML = this.user.organization;
		this.profileEmail.innerHTML = this.user.email;
		this.profileEmail.onclick = function() {
			window.open('mailto:' + user.email);
		}
		this.profileImage.setSrc(this.user.imageThumbURL);
    }
});

MobilAP.DesktopDirectoryAdminController = Class.create(MobilAP.DirectoryAdminController, {
    _processXHR: function(json,callback) {
        var result = this.base(json,callback);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    editMode: false,
    resetUser: function() {
        this.setUser(this.user);
    },
    setUser: function(user) {
        this.user = user;
        this.profileFirstNameField.value = this.user.FirstName;
        this.profileLastNameField.value = this.user.LastName;
        this.profileOrganizationField.value = this.user.organization;
        this.profileEmailField.value = this.user.email;
        this.profileAdminSwitch.setValue(this.user.admin);
        this.profileImageFile.value = '';
    },
    userDidChange: function(change,keyPath) {
        if (change.newValue) {
            this.setUser(change.newValue);
        }
    },
    deleteUser: function() {
        return this.base(this.user.userID);
    },
    processImageUpload: function(data) {
        if (this.isError(data)) {
            alert("Error uploading image: "+ data.error_message);
        } else {
        	var now = new Date();
        	this.profileImage.setSrc(this.user.imageThumbURL + '?t=' + now.getTime());
        }
    },
    saveUser: function(user, callback) {
        if ('object' == typeof user) {
            return this.base(user,callback);
        }
        
        this.user.FirstName = this.profileFirstNameField.value;
        this.user.LastName = this.profileLastNameField.value;
        this.user.organization = this.profileOrganizationField.value;
        this.user.email = this.profileEmailField.value;
        this.user.admin = this.profileAdminSwitch.value ? -1 : 0;
        var result = this.base(this.user);
        if (mobilAP.isError(result)) {
            alert(result.error_message);
            return false;
        }

        if (this.user.userID) {
            var params = {
                post: 'updateUserImage',
                userID: this.user.userID
            }

            this.uploadFile(this.profileUploadForm, params, this.processImageUpload.bind(this));
        }

        return true;
    },
    constructor: function(params) {
        this.base(params);
        this.directoryController.addObserverForKeyPath(this, this.userDidChange, "user");
    }
});

MobilAP.DesktopDirectoryController = Class.create(MobilAP.DirectoryController, {
    addMode: false,
    updateMode: false,
    setEditMode: function(editMode) {
        this.editMode = editMode;
        this.profileEditButton.setText(this.editMode ? 'Save' : 'Edit');
        MobilAP.setClassName(this.profilePanel, 'mobilAP_editmode', this.editMode);
        if (!editMode) {
            this.profilePanel.style.display = this.object.selectionIndexes().length > 0 ? '' : 'none';
            this.setAddMode(false);
        }
        MobilAP.setClassName(this.profilePanel, 'mobilAP_addmode', this.addMode);
        MobilAP.setClassName(this.profilePanel, 'mobilAP_updatemode', this.editMode && !this.addMode);
    },
    setAddMode: function(addMode) {
        this.addMode = addMode ? true : false;
    },
    rowSelected: function(change, keyPath) {
        this.setEditMode(false);
        this.setAddMode(false);
        this.base(change, keyPath);
        this.profilePanel.style.display = this.object.selectionIndexes().length > 0 ? '' : 'none';
    },
    addUser: function() {
        this.clearSelection();
        this.user = new MobilAP.User();
        this.profilePanel.style.display = '';
        this.setAddMode(true);
        this.setEditMode(true);
    },
    viewDidLoad: function() { 
        this.clearSelection();
        this.profilePanel.style.display = 'none';
        this.listPanel.style.height = (document.getElementById('detailView').clientHeight-50) + 'px';
    },
    viewDidUnload: function() {
        this.stopReloadTimer();
    },
    content: function() {
    	return this._content;
    },
    reloadData: function() {
    	this._content = this._dataSource.content();
    	this.object.reloadData();
    },
    objectForRow: function() {
    },
    representationForRow: function(rowIndex) {
        return this.content()[rowIndex];
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
		var user = this.representationForRow(rowIndex);
		templateElements.directoryFirstName.innerHTML = user.FirstName;
		templateElements.directoryLastName.innerHTML = user.LastName;
		templateElements.directoryOrganization.innerHTML = user.organization;
	},
	filter: function(searchValue) {
		searchValue = searchValue.toLowerCase();
		for (var i=0; i<this.object.rows.length;i++) {
			var row = this.object.rows[i];
            if (this._content[i].FirstName.toLowerCase().match(searchValue) ||
                this._content[i].LastName.toLowerCase().match(searchValue) ||
                this._content[i].organization.toLowerCase().match(searchValue)) {
                row.style.display='';
            } else {
                row.style.display='none';
            }
		}
	},
    numberOfRows: function() {
		return this.content().length
    },
    constructor: function(part_id,params) {
    	this.base(part_id,params);
		this._dataSource = dashcode.getDataSource('users');
		this._content = this._dataSource.content() || [];
		this._dataSource.addObserverForKeyPath(this, this.reloadData, "content");
        this.object.setDataSource(this);
    }
});
    

MobilAP.DesktopAdminController = Class.create(MobilAP.AdminController, {
    active_tab_id: 'Settings',
    active_tab_index: 0,
    active_view: 'Settings',
    viewControllers: {},
    _processXHR: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    tabIndexForId: function(tab_id) {
        var tabs = admin_tabs.tabs();
        for (var i=0; i< tabs.length; i++) {
            if (tabs[i].tab_id==tab_id) {
                return i;
            }
        }
    },
    setTabID: function(tab_id) {
        var tab_index = this.tabIndexForId(tab_id);
        if (typeof tab_index != 'undefined') {
            return this.setTabIndex(tab_index);
        }
        
        throw ("Unable to get index for " + tab_id);
    },
    addViewController: function(view_id, controller) {
        if (!(view_id in this.viewControllers)) {
            this.viewControllers[view_id] = [];
        }

        this.viewControllers[view_id].push(controller);
    },
    loadView: function(toView, animate) {
        if (this.getCurrentView().id != ('admin'+toView)) {
            this.setCurrentView('admin'+toView, animate);
            this.active_view = toView;
            if (toView in this.viewControllers) {
                for (var i=0; i<this.viewControllers[toView].length;i++) {
                    try {
                        this.viewControllers[toView][i].viewDidLoad(toView);
                    } catch(e) {
                    }
                }
            }
        }
    },
    setTabIndex: function(tab_index) {
        var tab_id = admin_tabs.tabs()[tab_index].tab_id;
        this.loadView(tab_id);
        this.active_tab_index = tab_index;
        this.active_tab_id = tab_id
        this.admin_tabbar.reloadData();
        this.admin_tabbar.setSelectionIndexes([tab_index]);
    },
    getCurrentView: function() {
        return this.admin_stack.getCurrentView();
    },
    setCurrentView: function(view_id, animate) {
        this.admin_stack.setCurrentView(view_id, animate);
    },
    viewDidUnload: function() {
    },
    viewDidLoad: function() {
        this.admin_tabbar.reloadData();
        this.setTabID(this.active_view);
        for (var i=0; i<this.switches.length;i++) {
            document.getElementById('config'+this.switches[i]).object.setValue(this.getConfig(this.switches[i]));
        }
        this.initTimeZone();
    }, 
    updateTimeZoneSelect: function() {
		var select = this;
		var controller = select.controller;
		var url = base_url + 'setup/timezones.php?';
		
		for (var i=0;i<=select.index;i++) {
			var value = controller.timeZoneSelects[i].options[controller.timeZoneSelects[i].selectedIndex].value;
			if (value) {
				if (i>0) {
					url += '&';
				}
				url+= controller.timeZoneSelects[i].field+'='+value;
			}
		}

		if (select.index < controller.timeZoneSelects.length-1) {
			var request = XHR.get(url);
			var selectUpdate = controller.timeZoneSelects[select.index+1];
			request.addMethods(function(json) { controller._processTimeZoneData(selectUpdate, json) });
		}

    	controller.updateTimeZone();
    },
    _processTimeZoneData: function(select,json) {
		select.reset();
		for (i=0; i<json.length;i++) {
			select.options[i+1] = new Option(json[i],json[i]);
		}

		this.updateTimeZone();
		if (!this.timeZoneSet) {
			this.setTimeZone();
		}
    },
    
    setTimeZone: function() {
    	timeZoneParts = mobilAP.getConfig('TIMEZONE').split('/');
    	for (var i=0; i<this.timeZoneSelects.length;i++) {
    		if (!(i in timeZoneParts)) {
    			timeZoneParts[i] = '';
    		}
    		for (var j=0;j<this.timeZoneSelects[i].options.length; j++) {
    			if (timeZoneParts[i]==this.timeZoneSelects[i].options[j].value) {
    				if (j != this.timeZoneSelects[i].selectedIndex) {
						this.timeZoneSelects[i].selectedIndex = j;
						this.timeZoneSelects[i].onchange();
					}
    				j = this.timeZoneSelects[i].options.length;
    			}
    		}
    	}
    	
    	if (mobilAP.getConfig('TIMEZONE')==this.timeZone) {
    		this.timeZoneSet = true;
    	}
    },
    initTimeZone: function() {
    	this.timeZoneSet = false;
    	this.timeZone = '';
    	if (!this.timeZoneSelects) {
			this.timeZoneSelects = [];
			var self = this;
			var x = [ 'Continent', 'Area', 'Detail'];
			for (var i=0;i<x.length;i++) {
				var select = document.createElement('select');
				select.controller = this;
				select.index = i;
				select.onchange = this.updateTimeZoneSelect.bind(select);
				select.field = x[i].toLowerCase();
				select.first = '- ' + x[i] + ' -';
				select.reset = function() {
					select.innerHTML = '';
					select.options[0] = new Option(select.first,'');
				}
				select.reset();
				this.timeZoneContainer.appendChild(select);
				this.timeZoneSelects.push(select);
			}
	
			var request = XHR.get(base_url + 'setup/timezones.php');
			request.addMethods(function(json) { 
				self._processTimeZoneData(self.timeZoneSelects[0],json);
				self.setTimeZone();
				});
		} else {
			this.setTimeZone();
		}
	  	this.updateTimeZone();
    },
    updateTimeZone: function() {
    	var timeZone = '';
    	for (var i=0;i<this.timeZoneSelects.length;i++) {
    		var value = this.timeZoneSelects[i].options[this.timeZoneSelects[i].selectedIndex].value;
			if (value) {
				if (i>0) {
					timeZone += '/';
				}
				timeZone += value;
			}
			if (i>0) {
				this.timeZoneSelects[i].style.display = this.timeZoneSelects[i].options.length>1 ? '' : 'none';
			}			
		}
		this.timeZone = timeZone;
		document.getElementById('configTIMEZONE').value = timeZone;
    },
    constructor: function(params) {
        this.base(params);
        this.switches = [];
        var elements = this.view.getElementsByTagName('div');
        var re;
        for (var i=0; i<elements.length;i++) {
            if (elements[i].className=='mobilAP_switch') {
                new MobilAP.Switch(elements[i].id);
                re = elements[i].id.match(/config(.*)/);
                this.switches.push(re[1]);
            }
        }
    }
});

MobilAP.DesktopContentAdminController = Class.create(MobilAP.ContentAdminController, {
    uploadWebClipIcon:function() {
        var self = this;
        var params = {
            post: 'updateIcon'
        }
        
        this.uploadFile(this.webclipUploadForm, params, function(data) {
            if (self.isError(data)) {
                alert("Error uploading image: "+ data.error_message);
            } else {
                var now = new Date();
                self.webclipImage.setSrc(self.webclipURL + '?t=' + now.getTime());
                self.webclipUploadFile.value = '';
                alert("Icon updated");
            }
        });
    },
    constructor: function(params) {
        this.base(params);
        this.webclipURL = this.webclipImage.src();
    }
})

MobilAP.DesktopHomeAdminController = Class.create(MobilAP.HomeAdminController, {
    viewDidLoad: function() {
    	document.getElementById('configHOME_WELCOME').value = mobilAP.getConfig('HOME_WELCOME');
    	document.getElementById('configHOME_SCHEDULE').value = mobilAP.getConfig('HOME_SCHEDULE');
    	document.getElementById('configHOME_DIRECTORY').value = mobilAP.getConfig('HOME_DIRECTORY');
    	document.getElementById('configHOME_ANNOUNCEMENTS').value = mobilAP.getConfig('HOME_ANNOUNCEMENTS');
    },
    constructor: function(params) {
        this.base(params);
    }
});

MobilAP.DesktopEvaluationQuestionAdminController = Class.create(MobilAP.EvaluationQuestionAdminController, {
    mode: 'add',
    reloadData: function() {
        this.base();
        this.clearSelection();
    },
    reset: function() {
        this.clearSelection();
        this.setQuestion(new MobilAP.EvaluationQuestion());
        document.getElementById('adminEvaluationQuestionsQuestion').style.display = 'none';
    },
    viewDidLoad: function() {
    	if (dashcode.getDataSource('evaluation').content().length) {
	    	this.questionNotice.innerHTML = '';
    	} else {
	    	this.questionNotice.innerHTML = 'No questions have been added';
    	}
        this.reset();
    },
    _processXHR: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    setQuestion: function(question) {
        this.question = question;
        this.questionTextField.value = this.question.question_text;
        for (var i=0; i<this.response_types.length; i++) {
            if (this.response_types[i] == this.question.question_response_type) {
                this.questionResponseTypeField.selectedIndex = i;
            }
        }
    	mobilAP.evaluationQuestionAdminController.questionAddResponseField.value = '';
		this.questionResponses.style.display = this.question.question_response_type == 'M' ? '' : 'none';
        this.questionResponsesList.reloadData();
    },
    rowSelected: function(change, keyPath) {
        this.base(change, keyPath);
        document.getElementById('adminEvaluationQuestionsQuestion').style.display = this.object.selectionIndexes().length > 0 ? '' : 'none';
        var selectedObjects = this.object.selectedObjects();
        if (selectedObjects && (1 == selectedObjects.length)){
            this.mode = 'edit';
            this.setQuestion(new MobilAP.EvaluationQuestion(selectedObjects[0]));
        } else {
            this.mode = 'add';
            document.getElementById('adminEvaluationQuestionsQuestion').style.display = 'none';
            this.setQuestion(new MobilAP.EvaluationQuestion());
        }
    },
    addNewQuestion: function() {
        this.mode = 'add';
        this.clearSelection();
        this.setQuestion(new MobilAP.EvaluationQuestion());
        document.getElementById('adminEvaluationQuestionsQuestion').style.display = '';
    },
    save: function() {
        var result = this[this.mode=='add' ? 'addQuestion' : 'updateQuestion'](this.question);
        return result;
    },
    numberOfRows: function() {
        return this.question.responses.length;
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        templateElements.adminEvaluationQuestionsQuestionResponseText.innerHTML = this.question.responses[rowIndex].response_text
        var self = this;
        templateElements.adminEvaluationQuestionsQuestionResponsesRemoveButton.onclick = function() {
            self.removeResponse(rowIndex);
        }
	},
    removeResponse: function(index) {
        var result = this.question.removeResponse(index);
        if (this.isError(result)) {
            return result;
        }
        this.questionResponsesList.reloadData();
        
    },
    addResponse: function(response_text) {
        var result = this.question.addResponse(response_text);
        if (this.isError(result)) {
            return result;
        }
        this.questionResponsesList.reloadData();
    },
    questionResponseTypeChanged: function() {
        var response_type = this.questionResponseTypeField.options[this.questionResponseTypeField.selectedIndex].value;
        this.question.setResponseType(response_type);
		this.questionResponses.style.display = response_type == 'M' ? '' : 'none';
        this.questionResponsesList.reloadData();
    },
    constructor: function(part_id, params) {
        this.base(part_id, params);
        this.question = new MobilAP.EvaluationQuestion();
        this.questionResponsesList.setDataSource(this);
        this.questionResponseTypeField.onchange = this.questionResponseTypeChanged.bind(this);
    }

});

MobilAP.DesktopQuestionController = Class.create(MobilAP.QuestionController, {
    viewDidLoad: function() {
        if (this.sessionController.questionAnswered(this.question.question_id)) {
            this.showResults();
        } else {
            this.showAsk();
        }
    },
    _processXHR: function(json) {
        var result = this.base(json);
        if (this.isError(result)) {
            alert(result.error_message);
        }
    },
    submitQuestion: function() {
        var result = this.base();
        if (this.isError(result)) {
            if (result.error_code==mobilAP.ERROR_NO_USER) {
                mobilAP.login();
            }
            alert(result.error_message);
        } else {
            this.showResults();
        }
    },
    getChartHeight: function() {
        return 250;
    },
    getChartWidth: function() {
        return 400;
    },
    selectResponse: function(response_index) {
        this.base(response_index);
        this.responses_list.setSelectionIndexes(this.selectedResponses);
    },
    sessionUpdated: function(change, keyPath) {
        this.base(change, keyPath);
        this.responses_list.setSelectionIndexes(this.selectedResponses);
    },
    showAsk: function() {
        this.stack.setCurrentView('question_ask');
    },
    showResults: function() {
        this.updateChart();
        this.stack.setCurrentView('question_results');
    },
    setQuestion: function(object) {
        this.base(object);
        this.questionText.innerHTML = this.question.question_text;
        this.questionSelectMessageText.innerHTML = this.question.selectMessage();
        this.responses_list.reloadData();
        this.results_list.reloadData();
        this.updateChart();
    }
});



function loginSubmit(event)
{
    var userID = document.getElementById('login_userID').value;
    var password = document.getElementById('login_pword').value;
    mobilAP.loginController.login(userID, password);
}


function logoutSubmit(event)
{
    mobilAP.loginController.logout();
}

var session_tabs = {
	
	_alltabs: [
        {tab_id:"info",tab_title:"Info"},
        {tab_id:"evaluation",tab_title:"Evaluation"},
        {tab_id:"links",tab_title:"Links"},
        {tab_id:"questions",tab_title:"Questions"},
        {tab_id:"discussion",tab_title:"Discussion"},
        {tab_id:"admin",tab_title:"Admin"}
    ],
    tabs: function() {
        var tabs = [];

        if (mobilAP.sessionController) {
            for (var i=0; i<this._alltabs.length; i++) {
                if (mobilAP.sessionController['show'+this._alltabs[i].tab_id]()) {
                    tabs.push(this._alltabs[i]);
                }
            }
        }
        
        return tabs;
    },
        
    numberOfRows: function() {
        this._tabs = this.tabs();
		return this._tabs.length;
	},
    objectForRow: function() {
    },
    representationForRow: function(rowIndex) {
        return this._tabs[rowIndex];
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        templateElements.sessionTabbarTitle.innerHTML = this.tabs()[rowIndex].tab_title;
        rowElement.onclick = function(event) {
            mobilAP.sessionController.setTabIndex(rowIndex);
        };
	}
};

var admin_tabs = {
	
	_alltabs: [
        {tab_id:"Settings",tab_title:"Settings"},
        {tab_id:"Home",tab_title:"Home List"},
        {tab_id:"EvaluationQuestions",tab_title:"Evaluation Questions"},
        {tab_id:"Sessions",tab_title:"Sessions"},
        {tab_id:"Content",tab_title:"Content"}
    ],
    tabs: function() {
        var tabs = [];

        if (mobilAP.adminController) {
            for (var i=0; i<this._alltabs.length; i++) {
//                if (mobilAP.adminController['show'+this._alltabs[i].tab_id]()) {
                    tabs.push(this._alltabs[i]);
  //              }
            }
        }
        
        return tabs;
    },
        
    numberOfRows: function() {
        this._tabs = this.tabs();
		return this._tabs.length;
	},
    objectForRow: function() {
    },
    representationForRow: function(rowIndex) {
        return this._tabs[rowIndex];
    },
	prepareRow: function(rowElement, rowIndex, templateElements) {
        templateElements.adminTabTitle.innerHTML = this.tabs()[rowIndex].tab_title;
        rowElement.onclick = function(event) {
            mobilAP.adminController.setTabIndex(rowIndex);
        };
	}
};


function addAnnouncement(event)
{
//    if (mobilAP.isAdmin()) {
    mobilAP.announcementsController.setAnnouncement(new MobilAP.Announcement());
    mobilAP.loadView('announcementAdmin');
    // }
}


function announcementSave(event)
{
    mobilAP.announcementsController.announcement.setAnnouncementTitle(document.getElementById('announcementAdminTitle').value);
    mobilAP.announcementsController.announcement.setAnnouncementText(document.getElementById('announcementAdminText').value);
    
    var result = mobilAP.announcementsController.save();
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    } else {
        mobilAP.loadView('announcements');
    }
}


function announcementCancel(event)
{
    mobilAP.loadView('announcements');
}

function sessionSave(event)
{
    mobilAP.sessionController.setTitle(document.getElementById('sessionAdminTitle').value);
    mobilAP.sessionController.setDescription(document.getElementById('sessionAdminDescription').value);
    var session_flags = 0;
    var _flags = [ 'Links', 'UserLinks', 'Discussion','Evaluation'];
    for (var i=0; i<_flags.length; i++) {
        if (document.getElementById('sessionAdminOptions' + _flags[i]).checked) {
            session_flags+=parseInt(document.getElementById('sessionAdminOptions'+_flags[i]).value);
        }
    }
    mobilAP.sessionController.setFlags(session_flags);

    var result = mobilAP.sessionController.saveSessionAdmin(function(result) {
        if (mobilAP.isError(result)) {
            alert(result.error_message);
        } else {
            alert('Session Saved');
        }
    
   	});
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    }
}


function sessionLinkButton(event)
{
    mobilAP.sessionController.loadView('links_add');
}


function sessionAddLink(event)
{
    var link_url = document.getElementById('sessionLinksAddURL').value;
    var link_title = document.getElementById('sessionLinksAddTitle').value;
    var result = mobilAP.sessionController.addLink(link_url, link_title);
}


var question_responses = {
	
	numberOfRows: function() {
        try {
            return mobilAP.questionController.question.responses.length;
        } catch(e) {
            return 0;
        }
	},
	
	// The List calls this method once for every row.
	prepareRow: function(rowElement, rowIndex, templateElements) {
        var response = mobilAP.questionController.question.responses[rowIndex];
        var index = mobilAP.questionController.codeMap.charAt(rowIndex);
        templateElements.sessionQuestionAskQuestionResponseText.innerText = index + '. ' + response.response_text;
        rowElement.onclick = function() {
            mobilAP.questionController.selectResponse(rowIndex);
        }
	}
};

var question_answers = {
	
	numberOfRows: function() {
        try {
            return mobilAP.questionController.question.responses.length+1;
        } catch(e) {
            return 0;
        }
	},
	
	prepareRow: function(rowElement, rowIndex, templateElements) {
        var question = mobilAP.questionController.question;
        if (rowIndex < question.responses.length) {
            MobilAP.removeClassName(rowElement,'question_answer_total');
            var response = question.responses[rowIndex];
            var index = mobilAP.questionController.codeMap.charAt(rowIndex);
            templateElements.sessionQuestionResultsAnswerText.innerHTML = index + '. ' + response.response_text;
            templateElements.sessionQuestionResultsAnswerCount.innerHTML = question.answers[response.response_value];
        } else {
            MobilAP.addClassName(rowElement,'question_answer_total');
            templateElements.sessionQuestionResultsAnswerText.innerHTML = 'Total:';
            templateElements.sessionQuestionResultsAnswerCount.innerHTML = question.answers.total;
        }
	}
};


function submit_question(event) {
    mobilAP.questionController.submitQuestion();
}

function post_discussion(event)
{
    var post_text = document.getElementById('sessionDiscussionTextField').value;
    var result = mobilAP.sessionController.postDiscussion(post_text);
}


function scheduleAdminAdd(event)
{
    if (mobilAP.isAdmin()) {
        var schedule_item = new MobilAP.ScheduleItem();
        schedule_item.start_time = mobilAP.scheduleController.date();
        schedule_item.end_time = mobilAP.scheduleController.date();
        mobilAP.scheduleController.setScheduleItem(schedule_item);
        mobilAP.loadView('scheduleAdmin');
    }
}

function scheduleAdminSave(event)
{
    var result = mobilAP.scheduleAdminController.save(
        function(result) {
            if (mobilAP.isError(result)) {
                alert(result.error_message);
            } else {
                mobilAP.loadView('schedule');
            }
        }
    );
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    }
}


function scheduleAdminCancel(event)
{
    mobilAP.loadView('schedule');
}


function scheduleAdminToggleEdit(event)
{
    if (mobilAP.isAdmin()) {
        mobilAP.scheduleListController.toggleEditMode();
    }
}

function directoryAdminToggleEdit(event)
{
    if (mobilAP.isAdmin()) {
        if (mobilAP.directoryController.editMode) {
            if (!mobilAP.directoryAdminController.saveUser()) {
                return;
            }
        } 
        
        mobilAP.directoryController.toggleEditMode();
    }
}

function directoryAdminAdd(event)
{
    if (mobilAP.isAdmin()) {
        mobilAP.directoryController.addUser();
    }
}

function scheduleAdminAddSession(event)
{
    if (mobilAP.isAdmin()) {
    	mobilAP.sessionAdminController.returnView='scheduleAdmin';
        mobilAP.loadView('newSessionAdmin');
    }
}

function sessionAdminSave(event)
{
    var session = new MobilAP.Session();
    session.setTitle(document.getElementById('newSessionAdminTitleField').value);
    session.setDescription(document.getElementById('newSessionAdminDescriptionField').value);
    var session_flags = 0;
    var _flags = [ 'Links', 'UserLinks', 'Discussion','Evaluation'];
    for (var i=0; i<_flags.length; i++) {
        if (document.getElementById('newSessionAdminOptions' + _flags[i]).checked) {
            session_flags+=parseInt(document.getElementById('newSessionAdminOptions'+_flags[i]).value);
        }
    }

    session.setFlags(session_flags);

    var result = mobilAP.sessionAdminController.addSession(session);
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    } else {
	    mobilAP.loadView(mobilAP.sessionAdminController.returnView);
    }
}

function sessionAdminCancel(event)
{
    mobilAP.loadView(mobilAP.sessionAdminController.returnView);
}

function scheduleAdminDelete(event)
{
    if (confirm('Do you want to remove this item?')) {
        mobilAP.scheduleController.deleteScheduleItem(mobilAP.scheduleController.scheduleItem().schedule_id);
        mobilAP.loadView('schedule');
    }
}


function sessionQuestionsToggleEdit(event)
{
    if (mobilAP.isAdmin()) {
        mobilAP.questionsController.toggleEditMode();
//        document.getElementById('sessionQuestionsEditButton').object.setText(mobilAP.sessionController.editMode['session_questions_list'] ? 'Done' : 'Edit');
    }
}


function sessionQuestionsAddQuestion(event)
{
    if (mobilAP.isAdmin()) {
        mobilAP.sessionQuestionAdminController.setQuestion(new MobilAP.SessionQuestion());
        mobilAP.loadView('sessionQuestionAdmin');
    }
}


function sessionQuestionAdminSave(event)
{
    var question = mobilAP.sessionQuestionAdminController.question;
    
    question.setQuestionActive(document.getElementById('sessionQuestionAdminQuestionActive').object.value);
    question.setQuestionText(document.getElementById('sessionQuestionAdminQuestionTextField').value);
    question.setMinimumChoices(document.getElementById('sessionQuestionAdminQuestionMinChoices').options[document.getElementById('sessionQuestionAdminQuestionMinChoices').selectedIndex].value);
    question.setMaximumChoices(document.getElementById('sessionQuestionAdminQuestionMaxChoices').options[document.getElementById('sessionQuestionAdminQuestionMaxChoices').selectedIndex].value);
    
    var result = mobilAP.sessionQuestionAdminController.save();
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    } else {
        mobilAP.loadView('session');
    }
    
}


function sessionQuestionAdminCancel(event)
{
    mobilAP.loadView('session');
}


function sessionQuestionAdminAddResponse(event)
{
    var response = document.getElementById('sessionQuestionAdminResponsesAddField').value;
    var result = mobilAP.sessionQuestionAdminController.addResponse(response);
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    }
 
}


function sessionQuestionAdminDelete(event)
{
    if (confirm('Do you want to remove this question?')) {
        mobilAP.sessionController.deleteQuestion(mobilAP.sessionQuestionAdminController.question);
        mobilAP.loadView('session');
    }
}


function announcementAdminEdit(event)
{
    document.getElementById('announcementAdminTitle').value = mobilAP.announcementsController.announcement.announcement_title;
    document.getElementById('announcementAdminText').value = mobilAP.announcementsController.announcement.announcement_text;
    mobilAP.loadView('announcementAdmin');
}


function announcementAdminDelete(event)
{
    if (confirm('Do you want to remove this announcement?')) {
        mobilAP.announcementsController.deleteAnnouncement(mobilAP.announcementsController.selectedObject);
        mobilAP.loadView('announcements');
        mobilAP.announcementsController.clearSelection();
    }
}


function announcementAdminCancel(event)
{
    mobilAP.loadView('announcements');
}


function sessionClearDiscussion(event)
{
    if (confirm('Are you sure you wish to clear the discussion for this session?')) {
        mobilAP.sessionController.clearDiscussion();
    }
}


function sessionEvaluationFinish(event)
{
    var result = mobilAP.sessionEvaluationController.submitEvaluation();
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    } else {
        mobilAP.sessionController.loadView('evaluation_thanks');
    }
}


function sessionEvaluationPrevious(event)
{
    mobilAP.sessionEvaluationController.setPreviousQuestion();
}


function sessionEvaluationNext(event)
{
    mobilAP.sessionEvaluationController.setNextQuestion();
}


function mailto(event)
{
    var e = event || window.event;
    var target = e.srcElement || e.target;
    window.open('mailto:' + target.innerHTML);
}


function evaluationQuestionAdminAddResponse(event)
{
    var response = mobilAP.evaluationQuestionAdminController.questionAddResponseField.value;
    var result = mobilAP.evaluationQuestionAdminController.addResponse(response);
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    } else {
    	mobilAP.evaluationQuestionAdminController.questionAddResponseField.value = '';
    }
}


function evaluationQuestionAddQuestion(event)
{
    mobilAP.evaluationQuestionAdminController.addNewQuestion();
}


function evaluationQuestionSave(event)
{
    mobilAP.evaluationQuestionAdminController.question.setQuestionText(document.getElementById('adminEvaluationQuestionsQuestionText').value);
    var result = mobilAP.evaluationQuestionAdminController.save();
	if (mobilAP.isError(result)) {
		alert(result.error_message);
	} else {
		mobilAP.evaluationQuestionAdminController.reset();
	}
}


function evaluationQuestionDelete(event)
{
	if (mobilAP.evaluationQuestionAdminController.mode=='add') {
	    mobilAP.evaluationQuestionAdminController.reset();
	    return;
	}
	
    if (confirm('Do you want to remove this question?')) {
        mobilAP.evaluationQuestionAdminController.deleteQuestion(mobilAP.evaluationQuestionAdminController.question);
    }
}

function evaluationQuestionCancel(event)
{
    mobilAP.evaluationQuestionAdminController.reset();
}

function adminSettingsSave(event)
{
    var params = {
        S: {
        	SITE_TITLE: document.getElementById('configSITE_TITLE').value,
        	TIMEZONE: document.getElementById('configTIMEZONE').value
		},
        B: {
            CONTENT_PRIVATE: document.getElementById('configCONTENT_PRIVATE').object.intValue(),
            USE_PASSWORDS: document.getElementById('configUSE_PASSWORDS').object.intValue(),
            USE_ADMIN_PASSWORDS: document.getElementById('configUSE_ADMIN_PASSWORDS').object.intValue(),
            USE_PRESENTER_PASSWORDS: document.getElementById('configUSE_PRESENTER_PASSWORDS').object.intValue(),
            ALLOW_SELF_CREATED_USERS: document.getElementById('configALLOW_SELF_CREATED_USERS').object.intValue(),
            SINGLE_SESSION_MODE: document.getElementById('configSINGLE_SESSION_MODE').object.intValue()   
        }
    }
    
    MobilAP.saveConfigs(params, function(json) {
        if (mobilAP.isError(json)) {
            alert(json.error_message);
        } else {
            alert('Settings Saved');
        }
    });
}


function removeSessionPresenter(event)
{
//    if (confirm("Do you want to remove this presenter from this session?")) {
        var e = event || window.event;
        var target = e.srcElement || e.target;
        while (target.nodeName!='LI') {
            target = target.parentNode;
        }
        if (target.objectValue) {
            mobilAP.sessionController.removePresenter(target.objectValue.userID, mobilAP.sessionController.reloadData.bind(mobilAP.sessionController));
        }
//    }
}


function directoryAdminCancelEdit(event)
{
    mobilAP.directoryAdminController.resetUser();
    mobilAP.directoryController.clearSelection();
}


function directoryAdminDelete(event)
{
    if (confirm('Are you sure you want to remove this user?')) {
        mobilAP.directoryAdminController.deleteUser();
        mobilAP.directoryController.setEditMode(false);    
    }
}


function changePassword(event)
{
    var newPassword = mobilAP.userProfileController.passwordField.value;
    var newPasswordVerify = mobilAP.userProfileController.passwordVerifyField.value;
    if (newPassword != newPasswordVerify) {
        alert("You did not verify your new password correctly");
        return;
    }
    var result = mobilAP.userProfileController.setPassword(newPassword);
    if (mobilAP.isError(result)) {
        alert(result.error_message);
    } else {
        mobilAP.userProfileController.passwordVerifyField.value='';
        mobilAP.userProfileController.passwordField.value='';
    }
}


function directoryAdminResetPassword(event)
{
    if (confirm("Are you sure you want to reset this user's password?")) {
        mobilAP.directoryAdminController.resetPassword();
    }
}


function createNewUser(event)
{
    if (mobilAP.getConfig('ALLOW_SELF_CREATED_USERS')) {
        mobilAP.loadView('profileCreate');
    }
}


function profileCreateSubmit(event)
{
    if (document.getElementById('profileCreatePassword').value != document.getElementById('profileCreateVerifyPassword').value)      {
        alert("You did not verify your password");
    }

    if (document.getElementById('profileCreatePassword').value.length==0) {
        alert("Password should not be blank");
    }
    
    var user = new MobilAP.User({
        FirstName: document.getElementById('profileCreateFirstName').value,
        LastName: document.getElementById('profileCreateLastName').value,
        organization: document.getElementById('profileCreateOrganization').value,
        email: document.getElementById('profileCreateEmail').value,
        password: document.getElementById('profileCreatePassword').value
    });
    
    var result = mobilAP.directoryAdminController.saveUser(user, function(_result) {
        if (mobilAP.isError(_result)) {
            alert(_result.error_message);
        } else {
            alert("Your account has been created. You may now login");
            mobilAP.loadView('login', 'Login');
        }
    });
    
    if (mobilAP.isError(result)) {
        alert(result.error_message);        
    }
    
}


function clearQuestionAnswers(event)
{
    if (confirm('Are you sure you want to clear the question results?')) {
        mobilAP.questionController.clearAnswers();
    }
}


function sessionQuestionViewResults(event)
{
    mobilAP.questionController.showResults();
}




function sessionAdminAddSession(event)
{
    if (mobilAP.isAdmin()) {
    	mobilAP.sessionAdminController.returnView='admin';
        mobilAP.loadView('newSessionAdmin');
    }
}


function adminSessionsToggleEdit(event)
{
    if (mobilAP.isAdmin()) {
        mobilAP.sessionsAdminController.toggleEditMode();
    }
}


function adminHomeSave(event)
{
    var params = {
        S: {
        	HOME_WELCOME: document.getElementById('configHOME_WELCOME').value,
        	HOME_SCHEDULE: document.getElementById('configHOME_SCHEDULE').value,
        	HOME_DIRECTORY: document.getElementById('configHOME_DIRECTORY').value,
        	HOME_ANNOUNCEMENTS: document.getElementById('configHOME_ANNOUNCEMENTS').value,
		},
        B: {
            HOME_SHOW_WELCOME: document.getElementById('configHOME_SHOW_WELCOME').object.intValue(),
            HOME_SHOW_SCHEDULE: document.getElementById('configHOME_SHOW_SCHEDULE').object.intValue(),
            HOME_SHOW_DIRECTORY: document.getElementById('configHOME_SHOW_DIRECTORY').object.intValue(),
            HOME_SHOW_ANNOUNCEMENTS: document.getElementById('configHOME_SHOW_ANNOUNCEMENTS').object.intValue(),
        }
    }
    
    MobilAP.saveConfigs(params, function(json) {
        if (mobilAP.isError(json)) {
            alert(json.error_message);
        } else {
            alert('Settings Saved');
        }
    });
}


function searchDirectory(event)
{
    var searchContent = document.getElementById('directorySearch').value;
    mobilAP.directoryController.filter(searchContent);
}


function adminWebclipIconUpload(event)
{
    mobilAP.contentAdminController.uploadWebClipIcon();
}
